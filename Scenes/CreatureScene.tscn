[gd_scene load_steps=9 format=3 uid="uid://3phm7o0vm6l7"]

[ext_resource type="Script" path="res://Scripts/CreatureScene.cs" id="1_06evm"]
[ext_resource type="PackedScene" uid="uid://lvv1ltx4h1yj" path="res://Scenes/hover_panel_exterior.tscn" id="3_x500w"]
[ext_resource type="Theme" uid="uid://4tw7tplf15cj" path="res://Resources/RolodexTheme.tres" id="5_gqy4h"]
[ext_resource type="Texture2D" uid="uid://cwq2iu3ps48mr" path="res://Assets/Characters/Character_Hamster.png" id="5_rcc7m"]
[ext_resource type="Script" path="res://Scripts/CoolButton.cs" id="6_0mdyr"]
[ext_resource type="FontFile" uid="uid://cg0c3inufecfm" path="res://Resources/DarumadropOne-Regular.ttf" id="6_rrudo"]

[sub_resource type="Shader" id="Shader_83x55"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;

		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}

		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);

			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}

	return false;
}

void fragment() {
	vec2 uv = UV;

	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));

		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;

		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}

	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3is5w"]
resource_local_to_scene = true
shader = SubResource("Shader_83x55")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/width = 0.0
shader_parameter/pattern = 0
shader_parameter/inside = false
shader_parameter/add_margins = true

[node name="CreatureScene" type="Node2D"]
script = ExtResource("1_06evm")

[node name="HoverPanelExterior" parent="." instance=ExtResource("3_x500w")]
visible = false
offset_left = -100.0
offset_top = -245.0
offset_right = 88.0
offset_bottom = -169.0

[node name="VBoxContainer" type="VBoxContainer" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -71.0
offset_top = -32.5
offset_right = 71.0
offset_bottom = 32.5
grow_horizontal = 2
grow_vertical = 2

[node name="NameLabel" type="Label" parent="VBoxContainer"]
layout_mode = 2
theme = ExtResource("5_gqy4h")
theme_override_colors/font_color = Color(1, 1, 1, 1)
theme_override_fonts/font = ExtResource("6_rrudo")
theme_override_font_sizes/font_size = 36
text = "MRs Cow"
horizontal_alignment = 1

[node name="TextureRect" type="Button" parent="VBoxContainer"]
material = SubResource("ShaderMaterial_3is5w")
custom_minimum_size = Vector2(0, 156)
layout_mode = 2
theme = ExtResource("5_gqy4h")
icon = ExtResource("5_rcc7m")
flat = true
icon_alignment = 1
expand_icon = true
script = ExtResource("6_0mdyr")
